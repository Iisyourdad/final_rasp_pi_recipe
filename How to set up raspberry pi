sudo raspi-config
#select boot/autologin desktop

sudo apt update
sudo apt full-upgrade


cd Downloads
git clone https://github.com/Iisyourdad/final_rasp_pi_recipe.git
cd..
cd..
mv ~/Downloads/final_rasp_pi_recipe/{django_server_run.sh,run_kiosk.sh} .
sudo chmod +x /home/tyler/django_server_run.sh
sudo chmod +x /home/tyler/run_kiosk.sh
cd final_rasp_pi_recipe
sudo apt update
sudo apt install python3-venv
python3 -m venv venv
source venv/bin/activate
pip install asgiref
pip install Django
pip install django-ckeditor
pip install django-crispy-forms
pip install django-js-asset
pip install pillow
pip install pillow
pip install sqlparse
pip install tzdata
deactivate

cd ..
cd..

sudo d +x /home/tyler/django_server_run.sh
sudo chmod +x /home/tyler/run_kiosk.sh

sudo nano /etc/systemd/system/django.service
"""

[Unit]
Description=Django Server
After=network.target

[Service]
User=tyler
ExecStart=/home/tyler/django_server_run.sh
Restart=always

[Install]
WantedBy=multi-user.target

"""
mkdir -p /home/tyler/.config/systemd/user
nano /home/tyler/.config/systemd/user/kiosk.service

"""
[Unit]
Description=Kiosk Service
After=graphical-session.target

[Service]
ExecStart=/bin/bash /home/tyler/run_kiosk.sh
Restart=on-failure

[Install]
WantedBy=default.target

"""
systemctl --user daemon-reload
systemctl --user enable kiosk.service
systemctl --user start kiosk.service

sudo loginctl enable-linger tyler


sudo systemctl daemon-reload
sudo systemctl enable django.service
sudo systemctl enable kiosk.service
sudo systemctl start django.service
sudo systemctl start kiosk.service

sudo cp /boot/firmware/config.txt /boot/config.txt.backup
sudo nano /boot/firmware/config.txt

#Put in disable_splash=1

sudo cp /boot/firmware/cmdline.txt /boot/cmdline.txt.backup
sudo nano /boot/firmware/cmdline.txt

"""
console=tty3 quiet loglevel=0 logo.nologo vt.global_cursor_default=0 root=PARTUUID=e3ecc4f3-02 rootfstype=ext4 fsck.repair=yes rootwait plymouth.ignore-serial-consoles cfg80211.ieee80211_regdom=US


"""

sudo systemctl disable getty@tty1.service

sudo nano /usr/local/bin/update_wifi.sh

"""
#!/bin/bash
# Append a network block to wpa_supplicant.conf and reload Wi‑Fi.

set -e  # exit on any error

if [ -z "$1" ]; then
  echo "Usage: $0 'network={ ... }'"
  exit 1
fi

CFG="/etc/wpa_supplicant/wpa_supplicant.conf"

# Add a blank line first so the block is cleanly separated.
printf "\n%s\n" "$1" >> "$CFG"

# Ensure correct permissions on the conf file (optional but good practice).
chmod 600 "$CFG"

# Reconfigure Wi‑Fi
/usr/sbin/wpa_cli -i wlan0 reconfigure

"""

sudo chmod +x /usr/local/bin/update_wifi.sh

sudo visudo
"""
tyler ALL=(root) NOPASSWD: /usr/local/bin/update_wifi.sh
"""

sudo update-initramfs -u

sudo nano /etc/lightdm/lightdm.conf

#Then add this line under [Seat:*]:
"""
xserver-command=X -s 0 -dpms -nocursor -br -background white
"""


sudo mkdir -p /usr/share/X11/xorg.conf.d
sudo nano /usr/share/X11/xorg.conf.d/40-libinput-touchscreen.conf

"""
Section "InputClass"
    Identifier "Disable tapping for touchscreen"
    MatchIsTouchscreen "on"
    Driver "libinput"
    Option "Tapping" "off"
EndSection

"""


xinput set-button-map "xwayland-touch:14" 0 2 3
nano ~/disable_touch_tap.sh

"""
#!/bin/bash
sleep 5  # Wait a few seconds for X to initialize
xinput set-button-map "xwayland-touch:14" 0 2 3

"""

chmod +x ~/disable_touch_tap.sh


Install chrome extension

https://chromewebstore.google.com/detail/scrollanywhere/jehmdpemhgfgjblpkilmeoafmkhbckhi




Run all of the below


# same user that starts `python manage.py runserver`
python - <<'PY'
import subprocess, textwrap, shlex, sys
cfg = textwrap.dedent('''\
network={
    ssid="TestSSID"
    psk="testpass"
}''')
try:
    subprocess.run(
        ["sudo", "/usr/local/bin/update_wifi.sh", cfg],
        check=True
    )
except subprocess.CalledProcessError as e:
    print("return code:", e.returncode)
    print("stdout:\n", e.stdout)
    print("stderr:\n", e.stderr)
PY





tyler ALL=(root) NOPASSWD: /usr/local/bin/update_wifi.sh

sudo -u www-data sudo -n /usr/local/bin/update_wifi.sh "network={ssid=\"X\" psk=\"Y\"}"



result = subprocess.run(
    ["sudo", "-n", "/usr/local/bin/update_wifi.sh", config_text],
    capture_output=True, text=True
)
if result.returncode != 0:
    error = result.stderr or f"Script failed: {result.returncode}"


sudo /usr/local/bin/update_wifi.sh 'network={
    ssid="Bad/SSID"
    psk="badpass"
}'
echo "exit code:$?"








##############################################################################
# 0.  (run these exactly as shown from your normal sudo‑able account)        #
##############################################################################

# 1)  Clean, minimal wpa_supplicant.conf (keeps a backup)
sudo cp /etc/wpa_supplicant/wpa_supplicant.conf \
        /etc/wpa_supplicant/wpa_supplicant.conf.bak
printf 'country=US\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n' \
| sudo tee /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null
sudo chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf

# 2)  Create /usr/local/bin/update_wifi.sh  (replace‑not‑append)
sudo tee /usr/local/bin/update_wifi.sh >/dev/null <<'EOF'
#!/bin/bash
set -e
CFG=/etc/wpa_supplicant/wpa_supplicant.conf
[ -z "$1" ] && { echo "Usage: $0 'network={ ... }'"; exit 1; }
SSID=$(echo "$1" | grep -oP 'ssid="\\K[^"]+')
sudo sed -i "/ssid=\"${SSID//[\/&]/\\&}\"/,/}/d" "$CFG"
printf "\n%s\n" "$1" | sudo tee -a "$CFG" >/dev/null
chmod 600 "$CFG"
/usr/sbin/wpa_cli -i wlan0 reconfigure
EOF
sudo chmod +x /usr/local/bin/update_wifi.sh

# 3)  Allow the web‑server user (www‑data) to run the script password‑less
echo 'www-data ALL=(root) NOPASSWD: /usr/local/bin/update_wifi.sh' \
| sudo tee /etc/sudoers.d/update_wifi >/dev/null
sudo chmod 440 /etc/sudoers.d/update_wifi

# 4)  (Optional) also allow your own user (replace tyler if different)
echo 'tyler    ALL=(root) NOPASSWD: /usr/local/bin/update_wifi.sh' \
| sudo tee -a /etc/sudoers.d/update_wifi >/dev/null

# 5)  Quick non‑interactive test (no password prompt should appear)
sudo -u www-data sudo -n /usr/local/bin/update_wifi.sh 'network={
    ssid="TestSSID"
    psk="testpassword"
}'
#  -> if no error and exit code 0, configuration succeeded.

# 6)  Verify connection (give it ~5 seconds to associate)
sleep 5
sudo wpa_cli -i wlan0 status
ip -4 a show wlan0
##############################################################################





##############################################################################
# 1 – Is the wpa_supplicant service running on wlan0?                        #
##############################################################################
sudo systemctl status wpa_supplicant@wlan0.service  --no-pager

# If it shows “loaded but inactive (dead)” or “failed”, start/enable it:
sudo systemctl enable wpa_supplicant@wlan0.service
sudo systemctl start  wpa_supplicant@wlan0.service

##############################################################################
# 2 – Verify the control socket exists                                       #
##############################################################################
ls -l /var/run/wpa_supplicant/wlan0

# If the file is missing, the daemon isn’t bound to wlan0.
# Start it manually just once to confirm:
sudo wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf

##############################################################################
# 3 – Try reconfigure again (must show OK, not FAIL)                         #
##############################################################################
sudo /usr/sbin/wpa_cli -i wlan0 reconfigure

##############################################################################
# 4 – Now watch status and get an IP                                         #
##############################################################################
sleep 5
sudo wpa_cli -i wlan0 status
ip -4 a show wlan0
##############################################################################
